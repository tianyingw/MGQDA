Errormat[[4]][,3] = SMDQDA_ccle54[,1]
Errormat[[4]][,4] = pLDA_ccle54[,1]
Errormat[[4]][,5] = MSDA_ccle54[,1]
Errormat[[4]] <- as.data.frame(Errormat[[4]])
Errormat[[4]] <- Errormat[[4]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[4]]$groups <- factor(Errormat[[4]]$groups, levels = custom_order)
light_colors <- c("#e0f7fa", "#b2ebf2", "#80deea", "#4dd0e1", "#26c6da")
outliers <- Errormat[[1]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p1 = ggplot(Errormat[[1]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle51[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.text.y = element_text(size = 18)  # 调整 y 轴刻度文本的字体大小
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 1 & p = 300", gp = gpar(col = "black", fontsize = 18))
)
p1 <- p1 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[2]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p2 = ggplot(Errormat[[2]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle52[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 2 & p = 800", gp = gpar(col = "black", fontsize = 18))
)
p2 <- p2 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[3]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p3= ggplot(Errormat[[3]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle53[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 3 & p = 600", gp = gpar(col = "black", fontsize = 18))
)
p3 <- p3 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[4]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p4 = ggplot(Errormat[[4]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle54[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.38))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 4 & p = 1000", gp = gpar(col = "black", fontsize = 18))
)
p4 <- p4 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
combined_plot <- (p1 | p2 | p3 | p4)
combined_plot <- combined_plot + plot_layout(widths = c(rep(1,4)))
print(combined_plot)
library(ggplot2)
library(ggsignif)
library(ggthemes)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
Errormat = list()
Errormat[[1]] = matrix(0, 100, 5)
colnames(Errormat[[1]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[1]][,1] = MGQDA_ccle51[,1]
Errormat[[1]][,2] = RDA_ccle51[,1]
Errormat[[1]][,3] = SMDQDA_ccle51[,1]
Errormat[[1]][,4] = pLDA_ccle51[,1]
Errormat[[1]][,5] = MSDA_ccle51[,1]
Errormat[[1]] <- as.data.frame(Errormat[[1]])
Errormat[[1]] <- Errormat[[1]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[1]]$groups <- factor(Errormat[[1]]$groups, levels = custom_order)
Errormat[[2]] = matrix(0, 100, 5)
colnames(Errormat[[2]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[2]][,1] = MGQDA_ccle52[,1]
Errormat[[2]][,2] = RDA_ccle52[,1]
Errormat[[2]][,3] = SMDQDA_ccle52[,1]
Errormat[[2]][,4] = pLDA_ccle52[,1]
Errormat[[2]][,5] = MSDA_ccle52[,1]
Errormat[[2]] <- as.data.frame(Errormat[[2]])
Errormat[[2]] <- Errormat[[2]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[2]]$groups <- factor(Errormat[[2]]$groups, levels = custom_order)
Errormat[[3]] = matrix(0, 100, 5)
colnames(Errormat[[3]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[3]][,1] = MGQDA_ccle53[,1]
Errormat[[3]][,2] = RDA_ccle53[,1]
Errormat[[3]][,3] = SMDQDA_ccle53[,1]
Errormat[[3]][,4] = pLDA_ccle53[,1]
Errormat[[3]][,5] = MSDA_ccle53[,1]
Errormat[[3]] <- as.data.frame(Errormat[[3]])
Errormat[[3]] <- Errormat[[3]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[3]]$groups <- factor(Errormat[[3]]$groups, levels = custom_order)
Errormat[[4]] = matrix(0, 100, 5)
colnames(Errormat[[4]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[4]][,1] = MGQDA_ccle54[,1]
Errormat[[4]][,2] = RDA_ccle54[,1]
Errormat[[4]][,3] = SMDQDA_ccle54[,1]
Errormat[[4]][,4] = pLDA_ccle54[,1]
Errormat[[4]][,5] = MSDA_ccle54[,1]
Errormat[[4]] <- as.data.frame(Errormat[[4]])
Errormat[[4]] <- Errormat[[4]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[4]]$groups <- factor(Errormat[[4]]$groups, levels = custom_order)
light_colors <- c("#e0f7fa", "#b2ebf2", "#80deea", "#4dd0e1", "#26c6da")
outliers <- Errormat[[1]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p1 = ggplot(Errormat[[1]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle51[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.text.y = element_text(size = 18)  # 调整 y 轴刻度文本的字体大小
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 1 & p = 300", gp = gpar(col = "black", fontsize = 18))
)
p1 <- p1 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[2]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p2 = ggplot(Errormat[[2]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle52[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 2 & p = 800", gp = gpar(col = "black", fontsize = 18))
)
p2 <- p2 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[3]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p3= ggplot(Errormat[[3]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle53[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 3 & p = 600", gp = gpar(col = "black", fontsize = 18))
)
p3 <- p3 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[4]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p4 = ggplot(Errormat[[4]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle54[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 4 & p = 1000", gp = gpar(col = "black", fontsize = 18))
)
p4 <- p4 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
combined_plot <- (p1 | p2 | p3 | p4)
combined_plot <- combined_plot + plot_layout(widths = c(rep(1,4)))
print(combined_plot)
save.image("C:/Users/admin/Desktop/research_MGQDA/real_data_result/real_data_ccle_adj2.RData")
load("C:/Users/admin/Desktop/research_MGQDA/real_data_result/real_data_ccle_adj2.RData")
library(ggplot2)
library(ggsignif)
library(ggthemes)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
Errormat = list()
Errormat[[1]] = matrix(0, 100, 5)
colnames(Errormat[[1]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[1]][,1] = MGQDA_ccle51[,1]
Errormat[[1]][,2] = RDA_ccle51[,1]
Errormat[[1]][,3] = SMDQDA_ccle51[,1]
Errormat[[1]][,4] = pLDA_ccle51[,1]
Errormat[[1]][,5] = MSDA_ccle51[,1]
Errormat[[1]] <- as.data.frame(Errormat[[1]])
Errormat[[1]] <- Errormat[[1]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[1]]$groups <- factor(Errormat[[1]]$groups, levels = custom_order)
Errormat[[2]] = matrix(0, 100, 5)
colnames(Errormat[[2]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[2]][,1] = MGQDA_ccle52[,1]
Errormat[[2]][,2] = RDA_ccle52[,1]
Errormat[[2]][,3] = SMDQDA_ccle52[,1]
Errormat[[2]][,4] = pLDA_ccle52[,1]
Errormat[[2]][,5] = MSDA_ccle52[,1]
Errormat[[2]] <- as.data.frame(Errormat[[2]])
Errormat[[2]] <- Errormat[[2]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[2]]$groups <- factor(Errormat[[2]]$groups, levels = custom_order)
Errormat[[3]] = matrix(0, 100, 5)
colnames(Errormat[[3]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[3]][,1] = MGQDA_ccle53[,1]
Errormat[[3]][,2] = RDA_ccle53[,1]
Errormat[[3]][,3] = SMDQDA_ccle53[,1]
Errormat[[3]][,4] = pLDA_ccle53[,1]
Errormat[[3]][,5] = MSDA_ccle53[,1]
Errormat[[3]] <- as.data.frame(Errormat[[3]])
Errormat[[3]] <- Errormat[[3]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[3]]$groups <- factor(Errormat[[3]]$groups, levels = custom_order)
Errormat[[4]] = matrix(0, 100, 5)
colnames(Errormat[[4]]) = c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
Errormat[[4]][,1] = MGQDA_ccle54[,1]
Errormat[[4]][,2] = RDA_ccle54[,1]
Errormat[[4]][,3] = SMDQDA_ccle54[,1]
Errormat[[4]][,4] = pLDA_ccle54[,1]
Errormat[[4]][,5] = MSDA_ccle54[,1]
Errormat[[4]] <- as.data.frame(Errormat[[4]])
Errormat[[4]] <- Errormat[[4]] %>% gather(key = 'groups',value = 'Errorrate')
# 创建一个自定义的排序顺序列表
custom_order <- c("MGQDA","HDRDA","SMDQDA","pLDA","MGSDA")
# 使用 factor 函数将 x 轴变量转换为有序因子，并指定自定义的排序顺序
Errormat[[4]]$groups <- factor(Errormat[[4]]$groups, levels = custom_order)
light_colors <- c("#e0f7fa", "#b2ebf2", "#80deea", "#4dd0e1", "#26c6da")
outliers <- Errormat[[1]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p1 = ggplot(Errormat[[1]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle51[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.text.y = element_text(size = 18)  # 调整 y 轴刻度文本的字体大小
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 1 & p = 300", gp = gpar(col = "black", fontsize = 18))
)
p1 <- p1 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[2]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p2 = ggplot(Errormat[[2]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle52[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 2 & p = 800", gp = gpar(col = "black", fontsize = 18))
)
p2 <- p2 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[3]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p3= ggplot(Errormat[[3]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle53[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 3 & p = 600", gp = gpar(col = "black", fontsize = 18))
)
p3 <- p3 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
outliers <- Errormat[[4]] %>%
group_by(groups) %>%
filter(Errorrate < (quantile(Errorrate, 0.25) - 1.5 * IQR(Errorrate)) |
Errorrate > (quantile(Errorrate, 0.75) + 1.5 * IQR(Errorrate)))
p4 = ggplot(Errormat[[4]], aes(x = groups, y = Errorrate, fill = groups)) +
stat_boxplot(geom = 'errorbar', width = 0.2, size = 0.6) +
geom_hline(yintercept = median(MGQDA_ccle54[,1]), color = "red", size = 0.6) +
geom_boxplot(width = 0.8, size = 0.6, notch = FALSE, outlier.shape = NA) +
geom_point(data = outliers, aes(x = groups, y = Errorrate), color = "black", size = 0.8) +
labs(x = '', y = '') +
labs(title = '') +
scale_fill_manual(values = light_colors) +  # 使用浅淡的蓝绿色系颜色
theme_grey(base_size = 15) +
theme(
legend.position = 'none',
panel.border = element_blank(),  # 移除图形边框
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, hjust = 1, size = 20),  # 旋转 x 轴标签
axis.title.x = element_blank(),
axis.line.x = element_blank(),   # 移除 x 轴线
axis.ticks.y = element_blank(),  # 移除 y 轴的短线
axis.text.y = element_blank()    # 移除 y 轴的坐标数
) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, 0.25)) +
coord_cartesian(ylim = c(0, 0.28))  # 固定 y 轴范围，并扩展 x 轴范围
# 添加灰色文字框和文本
caption_grob <- grobTree(
rectGrob(gp = gpar(fill = "grey80", col = NA)),
textGrob("model 4 & p = 1000", gp = gpar(col = "black", fontsize = 18))
)
p4 <- p4 + annotation_custom(caption_grob, xmin = 0, xmax = 5.7, ymin = 0.25, ymax = 0.3)
combined_plot <- (p1 | p2 | p3 | p4)
combined_plot <- combined_plot + plot_layout(widths = c(rep(1,4)))
print(combined_plot)
